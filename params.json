{
  "name": "Horrible-Hash",
  "tagline": "Hash as an erlang process",
  "body": "\r\n\r\n# Module horrible_hash #\r\n* [Description](#description)\r\n* [Function Index](#index)\r\n* [Function Details](#functions)\r\n\r\nModule `horrible_hash` is an implementation of (perl) hash as an erlang process.\r\n\r\nCopyright (c) 2016 Eric Avdey\r\n\r\n__Version:__ 0.1\r\n\r\n__Authors:__ Eric Avdey ([`eiri@eiri.ca`](mailto:eiri@eiri.ca)).\r\n\r\n__References__* [https://github.com/eiri/horrible-hash](https://github.com/eiri/horrible-hash)\r\n\r\n<a name=\"index\"></a>\r\n\r\n## Function Index ##\r\n\r\n\r\n<table width=\"100%\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" summary=\"function index\"><tr><td valign=\"top\"><a href=\"#delete-1\">delete/1</a></td><td>Delete existing hash.</td></tr><tr><td valign=\"top\"><a href=\"#delete-2\">delete/2</a></td><td>Removes a given key from a hash.</td></tr><tr><td valign=\"top\"><a href=\"#each-1\">each/1</a></td><td>Returns iterator for a hash.</td></tr><tr><td valign=\"top\"><a href=\"#exists-2\">exists/2</a></td><td>Retrns true is a given key associated with a value in a hash.</td></tr><tr><td valign=\"top\"><a href=\"#get-2\">get/2</a></td><td>Gets a value for a given key.</td></tr><tr><td valign=\"top\"><a href=\"#keys-1\">keys/1</a></td><td>Returns a list of all the keys allocated in a hash.</td></tr><tr><td valign=\"top\"><a href=\"#new-1\">new/1</a></td><td>Creates a new hash with a given name.</td></tr><tr><td valign=\"top\"><a href=\"#set-3\">set/3</a></td><td>Sets a value for a given key.</td></tr><tr><td valign=\"top\"><a href=\"#values-1\">values/1</a></td><td>Returns a list of all the values stored in a hash.</td></tr></table>\r\n\r\n\r\n<a name=\"functions\"></a>\r\n\r\n## Function Details ##\r\n\r\n<a name=\"delete-1\"></a>\r\n\r\n### delete/1 ###\r\n\r\n<pre><code>\r\ndelete(Name::atom()) -&gt; boolean()\r\n</code></pre>\r\n<br />\r\n\r\nDelete existing hash.\r\n\r\n<a name=\"delete-2\"></a>\r\n\r\n### delete/2 ###\r\n\r\n<pre><code>\r\ndelete(Name::atom(), Key::any()) -&gt; boolean()\r\n</code></pre>\r\n<br />\r\n\r\nRemoves a given key from a hash.\r\nReturns true even if the hash doesn't have the key.\r\n\r\n<a name=\"each-1\"></a>\r\n\r\n### each/1 ###\r\n\r\n<pre><code>\r\neach(Name::atom()) -&gt; [{Key::any(), Value::any()}]\r\n</code></pre>\r\n<br />\r\n\r\nReturns iterator for a hash.\r\nOn each call returns a tuple of {Key, Value} until end is reached.\r\nAt which moment returns an empty list. Repeated call will initiate\r\na new iterator.\r\n\r\n<a name=\"exists-2\"></a>\r\n\r\n### exists/2 ###\r\n\r\n<pre><code>\r\nexists(Name::atom(), Key::any()) -&gt; boolean()\r\n</code></pre>\r\n<br />\r\n\r\nRetrns true is a given key associated with a value in a hash.\r\nOtherwise returns false.\r\n\r\n<a name=\"get-2\"></a>\r\n\r\n### get/2 ###\r\n\r\n<pre><code>\r\nget(Name::atom(), Key::any()) -&gt; Value::any() | undefined\r\n</code></pre>\r\n<br />\r\n\r\nGets a value for a given key.\r\nIf no value exists returns atom undefined.\r\n\r\n<a name=\"keys-1\"></a>\r\n\r\n### keys/1 ###\r\n\r\n<pre><code>\r\nkeys(Name::atom()) -&gt; [Key::any()]\r\n</code></pre>\r\n<br />\r\n\r\nReturns a list of all the keys allocated in a hash.\r\nOrder not guaranteed.\r\n\r\n<a name=\"new-1\"></a>\r\n\r\n### new/1 ###\r\n\r\n<pre><code>\r\nnew(Name::atom()) -&gt; true\r\n</code></pre>\r\n<br />\r\n\r\nCreates a new hash with a given name.\r\nInternally creates a registred process with hash name\r\nthat uses process dictionary to hold provided values.\r\n\r\n<a name=\"set-3\"></a>\r\n\r\n### set/3 ###\r\n\r\n<pre><code>\r\nset(Name::atom(), Key::any(), Value::any()) -&gt; boolean()\r\n</code></pre>\r\n<br />\r\n\r\nSets a value for a given key.\r\nIf the key already has a value, overrides it.\r\n\r\n<a name=\"values-1\"></a>\r\n\r\n### values/1 ###\r\n\r\n<pre><code>\r\nvalues(Name::atom()) -&gt; [Value::any()]\r\n</code></pre>\r\n<br />\r\n\r\nReturns a list of all the values stored in a hash.\r\nOrder not guaranteed.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}